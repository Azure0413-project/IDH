# Generated by Django 4.1.3 on 2022-11-03 09:33

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Patient",
            fields=[
                ("p_id", models.IntegerField(primary_key=True, serialize=False)),
                ("p_name", models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name="Record",
            fields=[
                ("r_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=10)),
                ("gender", models.CharField(max_length=2)),
                ("birth", models.DateField()),
                ("age", models.IntegerField()),
                ("times", models.IntegerField()),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("record_time", models.DateTimeField()),
                ("machine_id", models.CharField(max_length=10)),
                ("bed", models.CharField(max_length=10)),
                (
                    "temperature",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=4),
                ),
                (
                    "start_temperature",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=4),
                ),
                (
                    "before_weight",
                    models.DecimalField(blank=True, decimal_places=3, max_digits=5),
                ),
                (
                    "ideal_weight",
                    models.DecimalField(blank=True, decimal_places=3, max_digits=5),
                ),
                (
                    "expect_dehydration",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                ("transfusion", models.DecimalField(decimal_places=3, max_digits=5)),
                ("food", models.DecimalField(decimal_places=3, max_digits=5)),
                (
                    "estimate_dehydration",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                (
                    "set_dehydration",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                (
                    "after_weight",
                    models.DecimalField(blank=True, decimal_places=3, max_digits=5),
                ),
                (
                    "real_dehydration",
                    models.DecimalField(blank=True, decimal_places=3, max_digits=5),
                ),
                ("start_SBP", models.IntegerField()),
                ("start_DBP", models.IntegerField()),
                ("end_SBP", models.IntegerField()),
                ("end_DBP", models.IntegerField()),
                ("mode", models.CharField(max_length=10)),
                ("machine", models.CharField(max_length=10)),
                ("start_flow_speed", models.IntegerField()),
                ("start_blood_speed", models.IntegerField()),
                ("Ca", models.IntegerField()),
                ("channel", models.CharField(max_length=50)),
                ("heparin", models.CharField(max_length=50)),
                ("ESA", models.CharField(blank=True, max_length=50)),
                ("coagulation", models.CharField(max_length=20)),
                ("SBP", models.IntegerField()),
                ("DBP", models.IntegerField()),
                ("pulse", models.IntegerField()),
                ("breath", models.IntegerField()),
                ("blood_speed", models.IntegerField()),
                ("flow_speed", models.IntegerField()),
                ("CVP", models.IntegerField()),
                ("DP", models.IntegerField()),
                ("TMP", models.IntegerField()),
                (
                    "dehydrate_speed",
                    models.DecimalField(decimal_places=2, max_digits=4),
                ),
                ("accumulation", models.DecimalField(decimal_places=2, max_digits=4)),
                (
                    "dialysate_temperature",
                    models.DecimalField(decimal_places=2, max_digits=4),
                ),
                ("heparin_volumn", models.DecimalField(decimal_places=2, max_digits=4)),
                ("flush", models.IntegerField(blank=True)),
                ("channel_confirmed", models.BooleanField()),
            ],
        ),
    ]
